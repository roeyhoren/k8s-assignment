name: Deploy K8s Assignment

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Set up Docker
      uses: docker/setup-buildx-action@v2
    
    - name: Install Kind
      run: |
        curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
        chmod +x ./kind
        sudo mv ./kind /usr/local/bin/kind
    
    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/kubectl
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0
        terraform_wrapper: false
    
    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform
    
    - name: Terraform Plan
      run: terraform plan -out=tfplan
      working-directory: ./terraform
    
    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan
      working-directory: ./terraform
    
    - name: Check deployment status
      run: |
        echo "Checking cluster connection..."
        kubectl cluster-info --context kind-devops-assignment
        
        echo "Checking deployment status..."
        kubectl get pods -o wide --context kind-devops-assignment
        kubectl get svc --context kind-devops-assignment
        kubectl get ingress --context kind-devops-assignment
        
        echo "Deployment completed successfully!"
    
    - name: Test applications
      run: |
        # Wait for ingress to be ready
        echo "Waiting for ingress controller..."
        kubectl wait --namespace ingress-nginx --for=condition=ready pod --selector=app.kubernetes.io/component=controller --timeout=300s --context kind-devops-assignment
        
        # Test using port-forward as backup
        echo "Testing apps using port-forward..."
        for app in app1 app2 podinfo; do
          echo "Testing $app..."
          kubectl port-forward svc/$app 8080:80 --context kind-devops-assignment &
          PF_PID=$!
          sleep 5
          
          response=$(curl -s http://localhost:8080)
          kill $PF_PID
          
          if echo "$response" | grep -q "pod_name"; then
            echo "✓ $app is responding correctly"
            echo "  Response: $response"
          else
            echo "✗ $app is not responding properly"
            echo "  Response: $response"
            kubectl get pods -l app=$app --context kind-devops-assignment
            kubectl describe pod -l app=$app --context kind-devops-assignment
            exit 1
          fi
        done
        
        echo "All applications are responding!"
    
    - name: Cleanup
      if: always()
      run: |
        # Only try to destroy if terraform state exists
        if [ -f terraform.tfstate ]; then
          terraform destroy -auto-approve
        fi
        
        # Always try to delete the kind cluster as backup
        kind delete cluster --name devops-assignment || true
      working-directory: ./terraform